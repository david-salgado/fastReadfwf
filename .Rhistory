' subject="[Depuracion ', IOEcode, '] FG', '"',
' body="', body, '"',
' server=remesas.ine.es'),
mustWork = TRUE,
intern = TRUE)
}
#####                           CIERRE DEL LOG                             #####
sink(type = c('message'))
sink()
closeAllConnections()
ls()
rm(list = ls())
################################################################################
####                           CARGA DE PAQUETES                            ####
library(data.table, quiet = TRUE)
library(fastReadfwf, quiet = TRUE)
library(RepoUtils, quiet = TRUE)
library(StQ, quiet = TRUE)
library(RepoReadWrite, quiet = TRUE)
library(RCurl, quiet = TRUE)
################################################################################
####                          PARÁMETROS GLOBALES                          #####
# Operación estadística
IOEcode <- 'E54088'
timePeriod <- 'AA2019'
Emails_SP <-    c('rosario.gonzalez.garcia@ine.es',
'patricia.lopez.alfranca@ine.es')
Emails_SGTIC <- c('teresa.vazquez.gutierres@ine.es')
Emails_DMTD <-  c('david.salgado.fernandez@ine.es',
'sandra.barragan.andres@ine.es')
### Servidor ftp
urlRoot <- 'ftp://ftp.ine.es/SALUD/EESE2019/'
fileNames <- c('cue_adulto', 'cue_hogar', 'persona', 'seccion')
fileURLs <- paste0(urlRoot, paste0(fileNames, '.txt'))
names(fileURLs) <- fileNames
### Diseños de registro
schemaPath <- 'R:/USIE/Proyecto_DepSel_VarQual/DisenosRegistro/EESE2019'
schemaNames <- file.path(
schemaPath,
paste0(IOEcode, '.DisRegistro_V1.AA2019.ftp_',
c('adulto', 'hogar', 'persona', 'seccion'), '.xlsx'))
### Repositorio
repoPath <- 'Z:'
pwdFileName <- '.passWordRepoEESE.txt'
pwd <- readLines(file.path('C:/', pwdFileName))
### log
logPath <- 'R:/USIE/Proyecto_DepSel_VarQual/categ_RF_produccion/log'
logFileName <- paste0('log_Servidor-Repo_', Sys.Date(), '.txt')
completeLogFileName <- file.path(logPath, logFileName)
if (file.exists(completeLogFileName)) file.remove(completeLogFileName)
logFile <- file(completeLogFileName, 'w+', encoding = 'UTF-8')
sink(file = logFile)
sink(file = logFile, type = c('message'))
cat('LECTURA DE DISEÑO DE REGISTROS...\n\n')
schema <- lapply(schemaNames, xlsxToSchema, sheetname = 'Schema')
names(schema) <- fileNames
cat('OK.\n\n')
cat('LECTURA DE DATOS BRUTOS...\n\n')
rawData <- lapply(fileNames, function(filename){
url <- fileURLs[[filename]]
tempFile <- file.path(tempdir(), filename)
download.file(url = url, destfile = tempFile)
fread_fwf(tempFile, schema[[filename]],
outFormat = 'data.table', perl = TRUE)
})
names(rawData) <- fileNames
cat('OK.\n\n')
cat('VALIDACIÓN DE DATOS BRUTOS...\n\n')
isFileValid <- sapply(fileNames, function(filename){
cat(paste0('    FICHERO ', filename, '\n\n'))
is.valid <- try(validateValues(rawData[[filename]], schema[[filename]]))
if (inherits(is.valid, 'try-error')) is.valid <- FALSE
cat('\n\n')
return(is.valid)
})
invalidFiles <- fileURLs[!isFileValid]
#for (Recipient in c(Emails_SP, Emails_SGTIC, Emails_DMTD)) {
for (Recipient in Emails_DMTD) {
body <- paste0('Los siguientes ficheros en el servidor ftp contienen valores inválidos: ',
paste0(invalidFiles, collapse = ', '), '. Por favor, revise el log.')
shell(paste0('SMTPMAIL.EXE from=repomicrodatos@ine.es ',
'to=', Recipient,
' subject="[Depuracion ', IOEcode, '] FG', '"',
' body="', body, '"',
' server=remesas.ine.es'),
mustWork = TRUE,
intern = TRUE)
}
sink(type = c('message'))
sink()
closeAllConnections()
cat('CONEXIÓN AL REPOSITORIO...\n\n')
MapDrive(IOEcode, repoPath, pwd)
cat('OK.\n\n')
cat('LECTURA DE DICCIONARIO DE DATOS...\n\n')
xlsxNamePattern <- paste0('.NombresVariables_V[0-9]+.')
allRepoFiles <- list.files(repoPath)
DDxlsxName <- allRepoFiles[grep(xlsxNamePattern, allRepoFiles)]
if (length(DDxlsxName) == 0){
for (Recipient in c(Emails_SP, Emails_SGTIC, Emails_DMTD)) {
body <- 'El fichero xlsx de esta operación no se encuentra en el repositorio.'
shell(paste0('SMTPMAIL.EXE from=repomicrodatos@ine.es ',
'to=', Recipient,
' subject="[Depuracion ', IOEcode, '] FG', '"',
' body="', body, '"',
' server=remesas.ine.es'),
mustWork = TRUE,
intern = TRUE)
}
} else {
DD <- RepoXLSToDD(file.path(repoPath, DDxlsxName))
cat('OK.\n\n')
}
DD
FG <- melt_StQ(rawData[[4]], DD)
FG
cat('ESCRITURA DE FICHERO FG EN REPOSITORIO...\n\n')
FGname <- file.path(pathRepo, paste0(IOEcode, '.FG_V1.AA2019.P_1'))
WriteRepoFile(FG, FGname)
cat('OK.\n\n')
FGname <- file.path(repoPath, paste0(IOEcode, '.FG_V1.AA2019.P_1'))
WriteRepoFile(FG, FGname)
cat('OK.\n\n')
list.files('Z:')
file.remove(FG)
file.remove(FGname)
list.files('Z:')
rawData[[1]]
validateValues(rawData[[1]], schema[[1]])
f <- rawData[[1]]
s <- schema[[1]]
f$FECHA_MES_adulto
schema <- lapply(schemaNames, xlsxToSchema, sheetname = 'Schema')
names(schema) <- fileNames
s <- schema[[1]]
validateValues(f, s)
f$E1E
which(f$E1E == '')
f[3099]
s2 <- xlsxToSchema(file.path(schemaPath, 'E54088.DisRegistro_V1.AA2019.ftp_adulto2.xlsx'), sheet = 'Schema')
validateValues(f, s2)
which(f$E2_1a == '')
s2 <- xlsxToSchema(file.path(schemaPath, 'E54088.DisRegistro_V1.AA2019.ftp_adulto2.xlsx'), sheet = 'Schema')
validateValues(f, s2)
s2 <- xlsxToSchema(file.path(schemaPath, 'E54088.DisRegistro_V1.AA2019.ftp_adulto2.xlsx'), sheet = 'Schema')
validateValues(f, s2)
s2 <- xlsxToSchema(file.path(schemaPath, 'E54088.DisRegistro_V1.AA2019.ftp_adulto2.xlsx'), sheet = 'Schema')
validateValues(f, s2)
s2 <- xlsxToSchema(file.path(schemaPath, 'E54088.DisRegistro_V1.AA2019.ftp_adulto2.xlsx'), sheet = 'Schema')
validateValues(f, s2)
s2 <- xlsxToSchema(file.path(schemaPath, 'E54088.DisRegistro_V1.AA2019.ftp_adulto2.xlsx'), sheet = 'Schema')
validateValues(f, s2)
s2 <- xlsxToSchema(file.path(schemaPath, 'E54088.DisRegistro_V1.AA2019.ftp_adulto2.xlsx'), sheet = 'Schema')
validateValues(f, s2)
s2 <- xlsxToSchema(file.path(schemaPath, 'E54088.DisRegistro_V1.AA2019.ftp_adulto2.xlsx'), sheet = 'Schema')
validateValues(f, s2)
s2 <- xlsxToSchema(file.path(schemaPath, 'E54088.DisRegistro_V1.AA2019.ftp_adulto2.xlsx'), sheet = 'Schema')
validateValues(f, s2)
s2 <- xlsxToSchema(file.path(schemaPath, 'E54088.DisRegistro_V1.AA2019.ftp_adulto2.xlsx'), sheet = 'Schema')
validateValues(f, s2)
s2 <- xlsxToSchema(file.path(schemaPath, 'E54088.DisRegistro_V1.AA2019.ftp_adulto2.xlsx'), sheet = 'Schema')
s2 <- xlsxToSchema(file.path(schemaPath, 'E54088.DisRegistro_V1.AA2019.ftp_adulto2.xlsx'), sheet = 'Schema'); validateValues(f, s2)
f2 <- f[-3099]
validateValues(f2, s)
which(f2$NIVEST == '')
s <- xlsxToSchema(file.path(schemaPath, 'E54088.DisRegistro_V1.AA2019.ftp_adulto.xlsx'), sheet = 'Schema')
validateValues(f2, s)
s2 <- xlsxToSchema(file.path(schemaPath, 'E54088.DisRegistro_V1.AA2019.ftp_adulto2.xlsx'), sheet = 'Schema'); validateValues(f, s2)
names(rawData)
rawData[['cue_adulto']]
dt <- rawData[[1]]
vardepu <- 'MarcaValidacion_CNO_AS'
n <- nchar(vardepu)
n
paraEdit <- names(dt)[substr(names(dt), 1, n) == vardepu]
paraEdit
paraEdit <- names(dt)[substr(names(dt), 1, n) == vardepu]
paraEdit
NombreEdit <- substr(paraEdit, n+2, nchar(paraEdit))
NombreEdit
vardepu <- 'MarcaValidacion'
n <- nchar(vardepu)
paraEdit <- names(dt)[substr(names(dt), 1, n) == vardepu]
NombreEdit <- substr(paraEdit, n+2, nchar(paraEdit))
NombreEdit
dt[, NombreEdit := NombreEdit]
dt
todosNames <- names(dt)
oldNames <- todosNames[substr(todosNames, nchar(todosNames) - nchar(NombreEdit) + 1, nchar(todosNames)) == NombreEdit]
oldNames
newNames <- paste0(substr(oldNames, 1, nchar(oldNames) - nchar(NombreEdit)), "[NombreEdit]")
newNames
melt_StQ(dt, DD)
melt_StQ(dt, DD)->dt_stQ
dt_stQ
dt
dt[, NORDEN_ID := A7_2a]
melt_StQ(dt, DD)->dt_stQ
dt_stQ
dt_stQ[IDDD == 'Parametro']
dt
setnames(dt, oldNames, newNames)
dt
oldNames
newNames
dt
melt_StQ(dt, DD)->dt_stQ
dt_stQ
dt_stQ[IDDD == 'Parametro']
dt
dcast_StQ(dt_stQ)
dcast_StQ(dt_stQ, UnitNames = TRUE)
dt
##ToDo: Actualizar melt_StQ para automatizar este cambio de nombre
## Este cambio está sujeto a depurar solo una variable CNO_AS
origVar <- c('MarcaValidacion_CNO_AS', 'ProbError_CNO_AS', 'MomError_CNO_AS', 'Prioridad_CNO_AS')
sapply(origVar, function(x){strsplit(x, split = '_', fixed = TRUE)[[1]][[1]]})
newVar <- paste0(
sapply(origVar, function(x){strsplit(x, split = '_', fixed = TRUE)[[1]][[1]]}),
'_[NombreEdit]')
newVar
rawData[['cue_adulto']][
, NORDEN_ID := A7_2a]
##ToDo: Actualizar melt_StQ para automatizar este cambio de nombre
## Este cambio está sujeto a depurar solo una variable CNO_AS
origVar <- c('MarcaValidacion_CNO_AS', 'ProbError_CNO_AS',
'MomError_CNO_AS', 'Prioridad_CNO_AS')
newVar <- paste0(
sapply(origVar, function(x){strsplit(x, split = '_', fixed = TRUE)[[1]][[1]]}),
'_[NombreEdit]')
setnames(rawData[['cue_adulto']], origVar, newVar)
##
rawData[['cue_adulto']][
, NombreEdit := 'CNO_AS']
rawData[[1]]
rawData[[1]][, `MarcaValidacion_[NombreEdit]` := '0']
rawData[[1]]
dt_stQ <- melt_StQ(dt, DD)
dt_stQ <- melt_StQ(rawData[[1]], DD)
dt_stQ[IDDD == 'Parametro']
dcast_StQ(dt_stQ[IDDD == 'Parametro'])
dcast_StQ(dt_stQ, UnitNames = TRUE)
dcast_StQ(dt_stQ[IDDD == 'Parametro'])
dcast_StQ(dt_stQ[IDDD == 'Parametro'], UnitNames = TRUE)
f <- copy(rawData[[2]])
s <- schema[[2]]
s2 <- xlsxToSchema(file.path(schemaPath, 'E54088.DisRegistro_V1.AA2019.ftp_hogar2.xlsx'), sheet = 'Schema')
s2 <- xlsxToSchema(file.path(schemaPath, 'E54088.DisRegistro_V1.AA2019.ftp_hogar2.xlsx'), sheet = 'Schema'); validateValues(f, s2)
s2 <- xlsxToSchema(file.path(schemaPath, 'E54088.DisRegistro_V1.AA2019.ftp_hogar2.xlsx'), sheet = 'Schema')
s2 <- xlsxToSchema(file.path(schemaPath, 'E54088.DisRegistro_V1.AA2019.ftp_hogar2.xlsx'), sheet = 'Schema'); validateValues(f, s2)
names(rawData)
rawData[['cue_hogar']] <-
rawData[['cue_hogar']][rawData[['seccion']][, c('CODSEC', 'ESTRATO'), with = FALSE], on = 'CODSEC']
rawData[[2]]
rawData <- lapply(fileNames, function(filename){
url <- fileURLs[[filename]]
tempFile <- file.path(tempdir(), filename)
download.file(url = url, destfile = tempFile)
fread_fwf(tempFile, schema[[filename]],
outFormat = 'data.table', perl = TRUE)
})
names(rawData) <- fileNames
list.files('Z:')
file.copy('Z:/E54088.NombresVariables_V1.xlsx', 'C:/E54088.NombresVariables_V1.xlsx')
devtools::install_github('david-salgado/RepoReadWrite')
library(RepoReadWrite)
RepoReadWrite::is.validXLSX('C:/E54088.NombresVariables_V1.xlsx')
RepoReadWrite::is.validXLS('C:/E54088.NombresVariables_V1.xlsx')
RepoReadWrite::ValidateXLS('C:/E54088.NombresVariables_V1.xlsx')
file.copy('C:/E54088.NombresVariables_V1.xlsx', 'Z:/E54088.NombresVariables_V1.xlsx')
file.copy('C:/E54088.NombresVariables_V1.xlsx', 'Z:/E54088.NombresVariables_V1.xlsx', overwrite = TRUE)
file.remove('Z:/E54088.DD_V1')
rm(list = ls())
devtools::load_all(".")
library(fastReadfwf)
search()
library(fastReadfwf)
library(data.table)
library(GGally)
#LECTURA DISEÑO DE REGISTRO
setwd("N:/UDMTD/LasaiBarreñada")
filenamePID <- "ICNPID_Schema.xlsx"
dataFile_PID <- "pid112001.txt"
stSchema_PID <- xlsxToSchema(filenamePID, sheetname = 'Schema', lang = 'en')
stSchema_PID
data_PID_st <- fread_fwf(dataFile_PID, stSchema_PID, outFormat = 'data.table', convert = FALSE, perl = T, encoding = "UTF-8")
data_PID_st <- fread_fwf(dataFile_PID, stSchema_PID, outFormat = 'data.table', convert = FALSE, perl = F, encoding = "UTF-8")
fastReadfwf::validateValues(data_PID_st, stSchema_PID)
stSchema_PID <- xlsxToSchema(filenamePID, sheetname = 'Schema', lang = 'en')
data_PID_st <- fread_fwf(dataFile_PID, stSchema_PID, outFormat = 'data.table', convert = FALSE, perl = F, encoding = "UTF-8")
validateValues(data_PID_st, stSchema_PID)
stSchema_PID
path <- system.file('extdata', package = 'fastReadfwf')
stSchema <- fastReadfwf::xlsxToSchema(file.path(path, 'SchemaSNHS.xlsx'), 'stSchema')
str(stSchema)
stSchema
stSchema[1:5, 1:5]
stSchema@df[1:5, 1:5]
stSchema@df[1:5, 1:6]
data.DT <- fread_fwf(
file.path(path, 'MicroDataSNHS.txt'), stSchema, outFormat = 'data.table', perl = TRUE)
devtools::load_all(".")
rm(list = c(".N"))
devtools::load_all(".")
data.DT <- fread_fwf(
a
data.DT <- fread_fwf(
file.path(path, 'MicroDataSNHS.txt'), stSchema, outFormat = 'data.table', perl = TRUE)
data.DT
stSchema
str(stSchema)
stSchema@df
View(stSchema@df)
path_data <- 'N:/UDMTD/UDMTD16/data'
path_src  <- 'N:/UDMTD/UDMTD16/code/src'
####  ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: ####
####                  LOAD PACKAGES AND FUNCTIONS                           ####
library(data.table)
#library(pROC)
library(ggplot2)
#library(viridis) #customize ggplots
#library(gridExtra) #customize ggroc
library(latex2exp)
tru.dt <- readRDS(file = file.path(path_data, 'FF_2011.dt.rds'))
raw.dt <- readRDS(file = file.path(path_data, 'FG_2011.dt.rds'))
raw.dt[, cod := paste(CODSEC, VIV, HOGAR, NORDEN_ID, sep = "")]
raw.dt
tru.dt[, cod := paste(CODSEC, VIV, HOGAR, NORDEN_ID, sep = "")]
tru.dt
raw.dt[!tru.dt, on = 'cod']
raw.dt[tru.dt, on = 'cod']
dat.dt <- raw.dt[tru.dt, on = 'cod']
dat.dt
names(raw.dt)
#CREACI?N DE LA NUEVA BASE DE DATOS
####  ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: ####
####                           SET PATHS                                    ####
path_data <- 'C:/Users/Tester/Desktop/TFG'
#path_src <- 'N:/UDMTD16/code/src'
#path_data <- 'N:/UDMTD16/data'
#path_data <- 'N:/UDMTD/UDMTD16/data'
#path_src  <- 'N:/UDMTD/UDMTD16/code/src'
####  ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: ####
####                  LOAD PACKAGES AND FUNCTIONS                           ####
library(data.table)
#library(pROC)
library(ggplot2)
#library(viridis) #customize ggplots
#library(gridExtra) #customize ggroc
library(latex2exp)
#library(ROCR)
####  ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: ####
####                  READ RDS                                              ####
tru.dt <- readRDS(file = file.path(path_data, 'FF_2011.dt.rds'))
raw.dt <- readRDS(file = file.path(path_data, 'FG_2011.dt.rds'))
raw.dt[, cod := paste(CODSEC, VIV, HOGAR, NORDEN_ID, sep = "")]
tru.dt[, cod := paste(CODSEC, VIV, HOGAR, NORDEN_ID, sep = "")]
varNames_all    <- names(raw.dt)
varNames_ID     <- c('cod', 'CCAA', 'ESTRATO', "SEXOa", "EDADa", "PROXY_0")
varNames_target <- c( "F9", "F18", "F8_2", "F17a_2", "F17m_2", "F7_2",
"F16a_2", "F16m_2", "A10_i",
"CNO_Sub_AS", "CNO_SPl_AS", "CNO_GPl_AS",
"CNAE_Gru_AS", "CNAE_Div_AS", "CNAE_Sec_AS",
"SitProf_AS", "CLASE_AS", "A7_2a", "D28", "ACTIVa")
setnames(raw.dt, varNames_target, paste0(varNames_target, '_raw'))
tru.dt <- tru.dt[, c('cod', varNames_target)]
setnames(tru.dt, varNames_target, paste0(varNames_target, '_true'))
path_data <- 'N:/UDMTD/UDMTD16/data'
path_src  <- 'N:/UDMTD/UDMTD16/code/src'
####  ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: ####
####                  LOAD PACKAGES AND FUNCTIONS                           ####
library(data.table)
#library(pROC)
library(ggplot2)
#library(viridis) #customize ggplots
#library(gridExtra) #customize ggroc
library(latex2exp)
#library(ROCR)
####  ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::: ####
####                  READ RDS                                              ####
tru.dt <- readRDS(file = file.path(path_data, 'FF_2011.dt.rds'))
raw.dt <- readRDS(file = file.path(path_data, 'FG_2011.dt.rds'))
raw.dt[, cod := paste(CODSEC, VIV, HOGAR, NORDEN_ID, sep = "")]
tru.dt[, cod := paste(CODSEC, VIV, HOGAR, NORDEN_ID, sep = "")]
varNames_all    <- names(raw.dt)
varNames_ID     <- c('cod', 'CCAA', 'ESTRATO', "SEXOa", "EDADa", "PROXY_0")
varNames_target <- c( "F9", "F18", "F8_2", "F17a_2", "F17m_2", "F7_2",
"F16a_2", "F16m_2", "A10_i",
"CNO_Sub_AS", "CNO_SPl_AS", "CNO_GPl_AS",
"CNAE_Gru_AS", "CNAE_Div_AS", "CNAE_Sec_AS",
"SitProf_AS", "CLASE_AS", "A7_2a", "D28", "ACTIVa")
setnames(raw.dt, varNames_target, paste0(varNames_target, '_raw'))
tru.dt <- tru.dt[, c('cod', varNames_target), with = FALSE]
setnames(tru.dt, varNames_target, paste0(varNames_target, '_true'))
View(raw.dt)
tru.dt <- readRDS(file = file.path(path_data, 'FF_2011.dt.rds'))
raw.dt <- readRDS(file = file.path(path_data, 'FG_2011.dt.rds'))
raw.dt[, cod := paste(CODSEC, VIV, HOGAR, NORDEN_ID, sep = "")]
tru.dt[, cod := paste(CODSEC, VIV, HOGAR, NORDEN_ID, sep = "")]
varNames_all    <- names(raw.dt)
varNames_ID     <- c('cod', 'CCAA', 'ESTRATO', "SEXOa", "EDADa", "PROXY_0")
varNames_target <- c( "F9", "F18", "F8_2", "F17a_2", "F17m_2", "F7_2",
"F16a_2", "F16m_2", "A10_i",
"CNO_Sub_AS", "CNO_SPl_AS", "CNO_GPl_AS",
"CNAE_Gru_AS", "CNAE_Div_AS", "CNAE_Sec_AS",
"SitProf_AS", "CLASE_AS", "A7_2a", "D28", "ACTIVa")
raw.dt <- raw.dt[, c('cod', varNames_ID, varNames_target), with = FALSE]
setnames(raw.dt, varNames_target, paste0(varNames_target, '_raw'))
tru.dt <- tru.dt[, c('cod', varNames_target), with = FALSE]
setnames(tru.dt, varNames_target, paste0(varNames_target, '_true'))
View(raw.dt)
tru.dt <- readRDS(file = file.path(path_data, 'FF_2011.dt.rds'))
raw.dt <- readRDS(file = file.path(path_data, 'FG_2011.dt.rds'))
raw.dt[, cod := paste(CODSEC, VIV, HOGAR, NORDEN_ID, sep = "")]
tru.dt[, cod := paste(CODSEC, VIV, HOGAR, NORDEN_ID, sep = "")]
varNames_all    <- names(raw.dt)
varNames_ID     <- c('cod', 'CCAA', 'ESTRATO', "SEXOa", "EDADa", "PROXY_0")
varNames_target <- c( "F9", "F18", "F8_2", "F17a_2", "F17m_2", "F7_2",
"F16a_2", "F16m_2", "A10_i",
"CNO_Sub_AS", "CNO_SPl_AS", "CNO_GPl_AS",
"CNAE_Gru_AS", "CNAE_Div_AS", "CNAE_Sec_AS",
"SitProf_AS", "CLASE_AS", "A7_2a", "D28", "ACTIVa")
raw.dt <- raw.dt[, c(varNames_ID, varNames_target), with = FALSE]
setnames(raw.dt, varNames_target, paste0(varNames_target, '_raw'))
tru.dt <- tru.dt[, c('cod', varNames_target), with = FALSE]
setnames(tru.dt, varNames_target, paste0(varNames_target, '_true'))
View(raw.dt)
View(tru.dt)
dat.dt <- merge(raw.dt, tru.dt, by = 'cod')
View(dat.dt)
target_vars <- c("CNO_AS", "CNAE_AS")
for (i in target_vars){
r <- paste(i, "_raw", sep = "")
t <- paste(i, "_true", sep = "")
targetName <- paste0('target_', i)
dat.dt[, (targetName) := ifelse(get(r) == get(t), 0, 1)]
}
target_vars <- c("CLASE_AS", "CNAE_Div_AS")
for (i in target_vars){
r <- paste(i, "_raw", sep = "")
t <- paste(i, "_true", sep = "")
targetName <- paste0('target_', i)
dat.dt[, (targetName) := ifelse(get(r) == get(t), 0, 1)]
}
View(dat.dt)
dat.dt
?psum
varNames_all
dat.dt[, target := ifelse(do.call(sum, target_vars) == 0, 0, 1)]
dat.dt[, target := ifelse(do.call(sum, as.list(target_vars)) == 0, 0, 1)]
#library(ROCR)
library(matrixStats)
paste0('target_', target_vars)
dat.dt[, target := rowSums2(.SD), .SDcols = paste0('target_', target_vars)]
dat.dt[, target := rowSums2(as.matrix(.SD)), .SDcols = paste0('target_', target_vars)]
dat.dt
tru.dt <- readRDS(file = file.path(path_data, 'FF_2011.dt.rds'))
raw.dt <- readRDS(file = file.path(path_data, 'FG_2011.dt.rds'))
raw.dt[, cod := paste(CODSEC, VIV, HOGAR, NORDEN_ID, sep = "")]
tru.dt[, cod := paste(CODSEC, VIV, HOGAR, NORDEN_ID, sep = "")]
varNames_all    <- names(raw.dt)
varNames_ID     <- c('cod', 'CCAA', 'ESTRATO', "SEXOa", "EDADa", "PROXY_0", 'FACTORADULTO')
varNames_target <- c( "F9", "F18", "F8_2", "F17a_2", "F17m_2", "F7_2",
"F16a_2", "F16m_2", "A10_i",
"CNO_Sub_AS", "CNO_SPl_AS", "CNO_GPl_AS",
"CNAE_Gru_AS", "CNAE_Div_AS", "CNAE_Sec_AS",
"SitProf_AS", "CLASE_AS", "A7_2a", "D28", "ACTIVa")
raw.dt <- raw.dt[, c(varNames_ID, varNames_target), with = FALSE]
setnames(raw.dt, varNames_target, paste0(varNames_target, '_raw'))
tru.dt <- tru.dt[, c('cod', varNames_target), with = FALSE]
setnames(tru.dt, varNames_target, paste0(varNames_target, '_true'))
dat.dt <- merge(raw.dt, tru.dt, by = 'cod')
regressors_vars <- c(setdiff(varNames_ID, 'cod'), varNames_target)
target_vars <- c("CLASE_AS", "CNAE_Div_AS")
for (i in target_vars){
r <- paste(i, "_raw", sep = "")
t <- paste(i, "_true", sep = "")
targetName <- paste0('target_', i)
dat.dt[, (targetName) := ifelse(get(r) == get(t), 0, 1)]
}
dat.dt[, target := (rowSums2(as.matrix(.SD)) > 0), .SDcols = paste0('target_', target_vars)]
dat.dt
dat.dt[, target := (rowSums2(as.matrix(.SD)) > 0) * 1L, .SDcols = paste0('target_', target_vars)]
dat.dt
dat.dt[
, target := (rowSums2(as.matrix(.SD)) > 0) * 1L, .SDcols = paste0('target_', target_vars)][
, c('target', regressors_vars), with = FALSE]
dat.dt[
, target := (rowSums2(as.matrix(.SD)) > 0) * 1L, .SDcols = paste0('target_', target_vars)]
data_rf.dt <- copy(raw.dt)[
, c(dat.dt$target, regressors_vars), with = FALSE]
data_rf.dt <- copy(raw.dt)[
, regressors_vars]
data_rf.dt <- copy(raw.dt)[
, ..regressors_vars]
regressors_vars <- c(setdiff(varNames_ID, 'cod'), paste0(varNames_target, '_raw'))
data_rf.dt <- copy(raw.dt)[
, ..regressors_vars]
data_rf.dt
data_rf.dt <- copy(raw.dt)[
, c('cod', 'target'), on = 'cod'][
, c('target', regressors_vars)]
data_rf.dt <- copy(raw.dt)[
dat.dt[, c('cod', 'target')], on = 'cod'][
, c('target', regressors_vars)]
data_rf.dt
View(data_rf.dt)
data_rf.dt <- copy(raw.dt)[
dat.dt[, c('cod', 'target')], on = 'cod'][
, c('target', regressors_vars), with = FALSE]
View(data_rf.dt)
rm(list = ls())
